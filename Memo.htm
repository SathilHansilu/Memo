<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>MemeHub — Local Prototype</title>
  <style>
    :root{--bg:#0f1724;--card:#0b1220;--muted:#94a3b8;--accent:#22c55e}
    *{box-sizing:border-box;font-family:Inter,system-ui,Segoe UI,Roboto,Arial;color:#e6eef6}
    html,body{height:100%;margin:0;background:linear-gradient(180deg,#071028 0%,#041322 100%);}
    header{height:64px;display:flex;align-items:center;gap:12px;padding:0 18px;background:rgba(255,255,255,0.02);backdrop-filter:blur(6px);border-bottom:1px solid rgba(255,255,255,0.03)}
    .logo{font-weight:800;letter-spacing:0.6px;font-size:18px}
    .search{flex:1;display:flex;align-items:center}
    .search input{width:100%;padding:10px 12px;border-radius:10px;border:1px solid rgba(255,255,255,0.04);background:transparent;color:inherit}
    .btn{padding:8px 12px;border-radius:8px;border:0;cursor:pointer;background:var(--accent);color:#022; font-weight:600}
    main{display:grid;grid-template-columns:220px 1fr 360px;gap:16px;padding:18px}
    .sidebar{background:linear-gradient(180deg, rgba(255,255,255,0.02), transparent);padding:16px;border-radius:12px;height:calc(100vh - 118px);overflow:auto}
    .sidebar h3{margin:0 0 12px 0;color:var(--muted);font-size:13px}
    .category{display:flex;flex-direction:column;gap:8px}
    .category button{background:transparent;border:1px solid rgba(255,255,255,0.03);padding:8px;border-radius:8px;text-align:left;color:inherit;cursor:pointer}
    .category button.active{background:rgba(34,197,94,0.12);border-color:rgba(34,197,94,0.25)}
    .feed{height:calc(100vh - 118px);overflow:auto;padding:6px}
    .grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(300px,1fr));gap:14px}
    .card{background:var(--card);border-radius:12px;overflow:hidden;border:1px solid rgba(255,255,255,0.03);display:flex;flex-direction:column}
    .card img{width:100%;height:260px;object-fit:cover;background:#081424}
    .card .meta{padding:10px 12px;display:flex;align-items:center;justify-content:space-between}
    .meta .left{display:flex;gap:10px;align-items:center}
    .meta h4{margin:0;font-size:16px}
    .meta p{margin:0;color:var(--muted);font-size:13px}
    .actions{display:flex;gap:8px;padding:8px 12px;border-top:1px solid rgba(255,255,255,0.02)}
    .actions button{flex:1;padding:8px;border-radius:8px;border:1px solid rgba(255,255,255,0.03);background:transparent;color:inherit;cursor:pointer}
    .comments{padding:8px 12px;border-top:1px dashed rgba(255,255,255,0.02)}
    .comment{padding:6px 0;border-bottom:1px solid rgba(255,255,255,0.01)}
    .rightcol{background:linear-gradient(180deg, rgba(255,255,255,0.02), transparent);padding:16px;border-radius:12px;height:calc(100vh - 118px);overflow:auto}
    .chat-list{display:flex;flex-direction:column;gap:8px}
    .contact{display:flex;align-items:center;gap:10px;padding:8px;border-radius:8px;cursor:pointer;border:1px solid rgba(255,255,255,0.02)}
    .chat-window{margin-top:12px;background:rgba(255,255,255,0.01);padding:12px;border-radius:10px;height:300px;display:flex;flex-direction:column}
    .messages{flex:1;overflow:auto;display:flex;flex-direction:column;gap:8px}
    .msg{max-width:70%;padding:8px;border-radius:8px}
    .msg.you{align-self:flex-end;background:rgba(34,197,94,0.12)}
    .msg.friend{align-self:flex-start;background:rgba(255,255,255,0.03)}

    .small{font-size:12px;color:var(--muted)}
    .tag{display:inline-block;background:rgba(255,255,255,0.02);padding:4px 8px;border-radius:999px;margin-right:6px;font-size:12px}

    /* modal styles */
    .modal{position:fixed;inset:0;background:rgba(2,6,23,0.6);display:none;align-items:center;justify-content:center}
    .modal.open{display:flex}
    .modal .panel{background:#021022;padding:18px;border-radius:12px;border:1px solid rgba(255,255,255,0.03);width:720px}
    .form-row{display:flex;gap:8px;margin-bottom:10px}
    .form-row input,.form-row textarea{flex:1;padding:10px;border-radius:8px;border:1px solid rgba(255,255,255,0.03);background:transparent;color:inherit}
    label{font-size:13px;color:var(--muted);display:block;margin-bottom:6px}

    footer{padding:12px;text-align:center;color:var(--muted);font-size:13px}

    @media(max-width:980px){main{grid-template-columns:1fr} .rightcol{display:none} .sidebar{display:none}}
  </style>
</head>
<body>
  <header>
    <div class="logo">MemeHub</div>
    <div class="search"><input id="searchInput" placeholder="Search memes, tags or users..." /></div>
    <button id="uploadBtn" class="btn">Upload</button>
    <button id="loginBtn" class="btn" style="background:transparent;border:1px solid rgba(255,255,255,0.03);color:inherit">Join</button>
  </header>

  <main>
    <aside class="sidebar">
      <h3>Categories</h3>
      <div class="category" id="categoryList"></div>
      <hr style="border:none;height:10px" />
      <h3>Popular Tags</h3>
      <div id="popularTags"></div>
    </aside>

    <section class="feed">
      <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:10px">
        <h2 style="margin:0">Explore</h2>
        <div class="small">Logged in as: <span id="currentUser">Guest</span></div>
      </div>
      <div class="grid" id="memeGrid"></div>
    </section>

    <aside class="rightcol">
      <h3>Messages</h3>
      <div class="chat-list" id="contacts"></div>
      <div class="chat-window" id="chatWindow" style="display:none">
        <div class="small" id="chatWith">Chat</div>
        <div class="messages" id="messages"></div>
        <div style="display:flex;gap:8px;margin-top:8px">
          <input id="msgInput" placeholder="Type a message..." />
          <button id="sendMsg" class="btn">Send</button>
        </div>
      </div>
    </aside>
  </main>

  <footer>Prototype — local-only. Save this file as <code>meme_platform.html</code> and open in your browser.</footer>

  <!-- Upload / Meme modal -->
  <div class="modal" id="uploadModal">
    <div class="panel">
      <h3>Upload Meme</h3>
      <div class="form-row">
        <div style="flex:1">
          <label>Title</label>
          <input id="memeTitle" placeholder="Meme title..." />
        </div>
        <div style="width:180px">
          <label>Category (comma)</label>
          <input id="memeCats" placeholder="funny,relatable" />
        </div>
      </div>
      <div class="form-row">
        <div style="flex:1">
          <label>Tags (comma)</label>
          <input id="memeTags" placeholder="work,school" />
        </div>
        <div style="width:180px">
          <label>Tag Friends (comma)</label>
          <input id="memeFriends" placeholder="alex,vinudi" />
        </div>
      </div>
      <div style="margin-bottom:10px">
        <label>Image file</label>
        <input id="memeFile" type="file" accept="image/*" />
      </div>
      <div style="display:flex;gap:8px;justify-content:flex-end">
        <button id="cancelUpload" class="btn" style="background:transparent;border:1px solid rgba(255,255,255,0.03)">Cancel</button>
        <button id="saveMeme" class="btn">Add Meme</button>
      </div>
    </div>
  </div>

  <!-- Login modal -->
  <div class="modal" id="loginModal">
    <div class="panel">
      <h3>Create / Join</h3>
      <label>Username</label>
      <input id="usernameInput" placeholder="Your username" />
      <div style="display:flex;gap:8px;justify-content:flex-end;margin-top:12px">
        <button id="cancelLogin" class="btn" style="background:transparent;border:1px solid rgba(255,255,255,0.03)">Cancel</button>
        <button id="saveUser" class="btn">Save</button>
      </div>
    </div>
  </div>

  <script>
    // --- tiny localDB helpers ---
    const DB = {
      get(key){try{return JSON.parse(localStorage.getItem(key)||'null')}catch(e){return null}},
      set(key,val){localStorage.setItem(key,JSON.stringify(val))}
    }

    // init data
    if(!DB.get('memes')) DB.set('memes', []);
    if(!DB.get('users')) DB.set('users', ['alex','vinudi','hiruna','denethma']);
    if(!DB.get('messages')) DB.set('messages', {});
    if(!DB.get('currentUser')) DB.set('currentUser','Guest');

    // ui refs
    const memeGrid = document.getElementById('memeGrid');
    const uploadBtn = document.getElementById('uploadBtn');
    const uploadModal = document.getElementById('uploadModal');
    const saveMeme = document.getElementById('saveMeme');
    const cancelUpload = document.getElementById('cancelUpload');
    const memeFile = document.getElementById('memeFile');
    const memeTitle = document.getElementById('memeTitle');
    const memeCats = document.getElementById('memeCats');
    const memeTags = document.getElementById('memeTags');
    const memeFriends = document.getElementById('memeFriends');
    const categoryList = document.getElementById('categoryList');
    const popularTagsDiv = document.getElementById('popularTags');
    const searchInput = document.getElementById('searchInput');
    const currentUserSpan = document.getElementById('currentUser');

    const loginBtn = document.getElementById('loginBtn');
    const loginModal = document.getElementById('loginModal');
    const saveUser = document.getElementById('saveUser');
    const cancelLogin = document.getElementById('cancelLogin');
    const usernameInput = document.getElementById('usernameInput');

    const contactsDiv = document.getElementById('contacts');
    const chatWindow = document.getElementById('chatWindow');
    const chatWith = document.getElementById('chatWith');
    const messagesDiv = document.getElementById('messages');
    const msgInput = document.getElementById('msgInput');
    const sendMsg = document.getElementById('sendMsg');

    let filter = {category:null,query:''};

    // load initial ui
    let memes = DB.get('memes')||[];
    let users = DB.get('users')||[];
    let messages = DB.get('messages')||{};
    let currentUser = DB.get('currentUser')||'Guest';
    currentUserSpan.textContent = currentUser;

    function renderCategories(){
      const cats = new Set();
      memes.forEach(m=> (m.categories||[]).forEach(c=>cats.add(c.trim())));
      // always show default
      const defaults = ['all','funny','relatable','gaming','anime','dank'];
      categoryList.innerHTML = '';
      const merged = Array.from(new Set([...defaults, ...cats]));
      merged.forEach(c=>{
        const btn = document.createElement('button');
        btn.textContent = c;
        btn.className = (filter.category===c||(!filter.category && c==='all'))? 'active':'';
        btn.addEventListener('click',()=>{ filter.category = c==='all'?null:c; render(); });
        categoryList.appendChild(btn);
      });
    }

    function renderTags(){
      const tagCount = {};
      memes.forEach(m=> (m.tags||[]).forEach(t=> tagCount[t]=(tagCount[t]||0)+1 ));
      popularTagsDiv.innerHTML='';
      Object.keys(tagCount).slice(0,8).forEach(t=>{
        const span=document.createElement('span'); span.className='tag'; span.textContent=t; span.addEventListener('click',()=>{searchInput.value=t; filter.query=t; render();});
        popularTagsDiv.appendChild(span);
      });
    }

    function shortDate(ts){ const d=new Date(ts); return d.toLocaleString(); }

    function render(){
      memes = DB.get('memes')||[]; // reload
      memeGrid.innerHTML='';
      const q = filter.query?.toLowerCase()||'';
      const visible = memes.filter(m=>{
        if(filter.category && !(m.categories||[]).includes(filter.category)) return false;
        if(!q) return true;
        if(m.title.toLowerCase().includes(q)) return true;
        if((m.tags||[]).some(t=>t.toLowerCase().includes(q))) return true;
        if((m.uploader||'').toLowerCase().includes(q)) return true;
        return false;
      }).sort((a,b)=>b.createdAt-a.createdAt);

      visible.forEach(m=>{
        const card=document.createElement('div'); card.className='card';
        const img = document.createElement('img'); img.src=m.img; img.alt=m.title;
        const meta=document.createElement('div'); meta.className='meta';
        meta.innerHTML=`<div class='left'><div><h4>${escapeHtml(m.title)}</h4><p class='small'>by ${escapeHtml(m.uploader||'Guest')} · ${shortDate(m.createdAt)}</p></div></div><div class='right small'>${(m.categories||[]).map(c=>`<span class='tag'>${escapeHtml(c)}</span>`).join('')}</div>`;
        const actions=document.createElement('div'); actions.className='actions';
        const likeBtn=document.createElement('button'); likeBtn.innerHTML=`❤️ ${m.likes||0}`; likeBtn.addEventListener('click',()=>{ m.likes=(m.likes||0)+1; DB.set('memes',memes); render(); });
        const commentBtn=document.createElement('button'); commentBtn.textContent='Comment';
        const shareBtn=document.createElement('button'); shareBtn.textContent='Share'; shareBtn.addEventListener('click',()=> shareMeme(m));
        actions.appendChild(likeBtn); actions.appendChild(commentBtn); actions.appendChild(shareBtn);

        const commentsDiv=document.createElement('div'); commentsDiv.className='comments';
        const commentsList=document.createElement('div');
        (m.comments||[]).forEach(cm=>{
          const cdiv=document.createElement('div'); cdiv.className='comment'; cdiv.innerHTML=`<strong>${escapeHtml(cm.user)}:</strong> ${highlightMentions(escapeHtml(cm.text))} <div class='small'>${shortDate(cm.at)}</div>`;
          commentsList.appendChild(cdiv);
        });
        const cform=document.createElement('div'); cform.style.display='flex'; cform.style.gap='8px'; cform.style.marginTop='8px';
        const cinput=document.createElement('input'); cinput.placeholder='Write a comment and use @name to tag'; cinput.style.flex='1';
        const csend=document.createElement('button'); csend.className='btn'; csend.textContent='Send'; csend.addEventListener('click',()=>{
          const txt=cinput.value.trim(); if(!txt) return; const cm={user:currentUser, text:txt, at:Date.now()}; m.comments=m.comments||[]; m.comments.push(cm); DB.set('memes',memes); cinput.value=''; render();
        });
        cform.appendChild(cinput); cform.appendChild(csend);
        commentsDiv.appendChild(commentsList); commentsDiv.appendChild(cform);

        card.appendChild(img); card.appendChild(meta); card.appendChild(actions); card.appendChild(commentsDiv);
        memeGrid.appendChild(card);
      });

      renderCategories(); renderTags(); renderContacts();
    }

    // helpers
    function escapeHtml(s){ return (s||'').replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;'); }
    function highlightMentions(s){ return s.replace(/@([a-zA-Z0-9_\-]+)/g, "<span style='color:var(--accent)'>@$1</span>"); }

    function shareMeme(m){
      const shareData = { title: m.title, text: m.title, url: m.img };
      if(navigator.share){ navigator.share(shareData).catch(()=>alert('Share cancelled')); }
      else if(navigator.clipboard){ navigator.clipboard.writeText(m.img).then(()=>alert('Image URL copied to clipboard')) }
      else{ prompt('Copy image URL', m.img); }
    }

    // upload flow
    uploadBtn.addEventListener('click',()=>{
      openUpload();
    });
    cancelUpload.addEventListener('click',()=>{ uploadModal.classList.remove('open'); clearUploadForm(); });

    function openUpload(){ uploadModal.classList.add('open'); }
    function clearUploadForm(){ memeTitle.value=''; memeCats.value=''; memeTags.value=''; memeFriends.value=''; memeFile.value=''; }

    saveMeme.addEventListener('click',()=>{
      const file = memeFile.files[0];
      if(!file){ alert('Please pick an image'); return; }
      const reader = new FileReader();
      reader.onload = (e)=>{
        const dataURL = e.target.result;
        const title = memeTitle.value.trim() || 'Untitled meme';
        const cats = memeCats.value.split(',').map(s=>s.trim()).filter(Boolean);
        const tags = memeTags.value.split(',').map(s=>s.trim()).filter(Boolean);
        const friends = memeFriends.value.split(',').map(s=>s.trim()).filter(Boolean);
        const newM = { id: Date.now()+'-'+Math.random().toString(36).slice(2,8), title, img:dataURL, categories:cats, tags:tags, taggedFriends:friends, likes:0, comments:[], createdAt:Date.now(), uploader:currentUser };
        memes.unshift(newM); DB.set('memes',memes); uploadModal.classList.remove('open'); clearUploadForm(); render();
      };
      reader.readAsDataURL(file);
    });

    // login flow
    loginBtn.addEventListener('click',()=>{ loginModal.classList.add('open'); usernameInput.value=''; });
    cancelLogin.addEventListener('click',()=>{ loginModal.classList.remove('open'); });
    saveUser.addEventListener('click',()=>{
      const name = usernameInput.value.trim(); if(!name) { alert('Enter a username'); return; }
      currentUser = name; DB.set('currentUser',name);
      if(!users.includes(name)) { users.push(name); DB.set('users',users); }
      currentUserSpan.textContent = currentUser; loginModal.classList.remove('open'); render();
    });

    // search
    searchInput.addEventListener('input',(e)=>{ filter.query = e.target.value; render(); });

    // contacts / messaging
    function renderContacts(){
      contactsDiv.innerHTML='';
      const list = users.filter(u=>u!==currentUser);
      list.forEach(u=>{
        const el=document.createElement('div'); el.className='contact'; el.textContent=u; el.addEventListener('click',()=> openChat(u)); contactsDiv.appendChild(el);
      });
    }
    let activeChat = null;
    function openChat(user){
      activeChat = user; chatWindow.style.display='block'; chatWith.textContent = 'Chat with ' + user; renderMessages();
    }
    function renderMessages(){
      messages = DB.get('messages')||{}; messagesDiv.innerHTML='';
      const conv = messages[chatKey(currentUser,activeChat)]||[];
      conv.forEach(m=>{
        const div=document.createElement('div'); div.className='msg ' + (m.from===currentUser? 'you':'friend'); div.textContent = m.text; messagesDiv.appendChild(div);
      });
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }
    function chatKey(a,b){ return [a,b].sort().join('::'); }

    sendMsg.addEventListener('click',()=> send()); msgInput.addEventListener('keydown',(e)=>{ if(e.key==='Enter') send(); });
    function send(){ const txt = msgInput.value.trim(); if(!txt || !activeChat) return; const key = chatKey(currentUser,activeChat); messages = DB.get('messages')||{}; if(!messages[key]) messages[key]=[]; messages[key].push({from:currentUser,text:txt,at:Date.now()}); DB.set('messages',messages); msgInput.value=''; renderMessages(); // simulate reply
      setTimeout(()=>{ messages = DB.get('messages')||{}; messages[key].push({from:activeChat,text:'(auto) got: '+txt,at:Date.now()}); DB.set('messages',messages); renderMessages(); }, 900 + Math.random()*1200);
    }

    // quick demo data if empty
    if((memes||[]).length===0){
      const demo = [
        {id:'d1',title:'When math hits',img:'data:image/svg+xml;utf8,'+encodeURIComponent(sampleSVG('Math','I hate exams')),categories:['relatable'],tags:['school','exam'],taggedFriends:['alex'],likes:5,comments:[{user:'alex',text:'Same',at:Date.now()-100000}],createdAt:Date.now()-200000,uploader:'vinudi'},
        {id:'d2',title:'Gaming grind',img:'data:image/svg+xml;utf8,'+encodeURIComponent(sampleSVG('Gaming','Just one more match')),categories:['gaming'],tags:['gaming','pc'],taggedFriends:['hiruna'],likes:12,comments:[],createdAt:Date.now()-500000,uploader:'alex'}
      ]; memes = demo; DB.set('memes',memes);
    }

    function sampleSVG(t1,t2){ return `<svg xmlns='http://www.w3.org/2000/svg' width='800' height='450'><rect width='100%' height='100%' fill='%23081b2b'/><text x='50%' y='38%' dominant-baseline='middle' text-anchor='middle' font-size='48' fill='%23fff' font-family='Arial'>${t1}</text><text x='50%' y='60%' dominant-baseline='middle' text-anchor='middle' font-size='26' fill='%23cbd5e1' font-family='Arial'>${t2}</text></svg>`; }

    // initial render
    render();

    // small UX: close modals when clicking outside
    document.querySelectorAll('.modal').forEach(m=> m.addEventListener('click', (e)=>{ if(e.target===m) m.classList.remove('open'); }));

  </script>
</body>
</html>
